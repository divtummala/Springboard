/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */

	SELECT Facilities.name FROM Facilities WHERE membercost = 0;

	Answer: 
	Badminton Court, Table Tennis, Snooker Table, Pool Table


/* Q2: How many facilities do not charge a fee to members? */

	SELECT COUNT(Facilities.name) FROM Facilities WHERE membercost > 0;

	Answer:
	5


/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */

	SELECT Facilities.name
	FROM Facilities
	WHERE Facilities.membercost < (0.20 * Facilities.monthlymaintenance);

	Answer:
	Tennis Court 1
	Tennis Court 2
	Badminton Court
	Table Tennis
	Massage Room 1
	Massage Room 2
	Squash Court
	Snooker Table
	Pool Table

/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. */
	SELECT *
	FROM Facilities
	WHERE facid IN (1, 5);

/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */

	SELECT Facilities.name,
	CASE WHEN Facilities.monthlymaintenance > 100 THEN 'expensive'
		ELSE 'cheap' END AS type
	FROM Facilities

/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */

	SELECT * 
	FROM Members
	ORDER BY memid DESC

/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

	SELECT DISTINCT Facilities.facid, Facilities.name, CONCAT(Members.firstname, ' ', Members.surname) AS member_names
	FROM Bookings
	LEFT JOIN Members
	USING(memid)
	LEFT JOIN Facilities ON Facilities.facid = Bookings.facid
	WHERE Facilities.name LIKE '%Tennis%'
	ORDER BY member_names


/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

	SELECT CONCAT( Members.firstname, ' ', Members.surname ) AS member_names, Facilities.name,
	SUM(CASE WHEN Members.memid = 0 THEN (Facilities.guestcost * Bookings.slots)
		ELSE (Facilities.membercost * Bookings.slots) END) AS cost
	FROM Bookings
	LEFT JOIN Facilities
	USING ( facid )
	LEFT JOIN Members ON Bookings.memid = Members.memid
	WHERE Bookings.starttime LIKE '2012-07-05%'
	GROUP BY Facilities.name
	ORDER BY cost DESC


/* Q9: This time, produce the same result as in Q8, but using a subquery. */


SELECT subquery.member_names, subquery.cost
FROM (
SELECT CONCAT( Members.firstname, ' ', Members.surname ) AS member_names, Facilities.name,
SUM(CASE WHEN Members.memid = 0 THEN (Facilities.guestcost * Bookings.slots)
	ELSE (Facilities.membercost * Bookings.slots) END) AS cost
FROM Bookings
LEFT JOIN Facilities
USING ( facid )
LEFT JOIN Members ON Bookings.memid = Members.memid
WHERE Bookings.starttime LIKE '2012-07-05%'
GROUP BY Facilities.name
ORDER BY cost DESC
    ) AS subquery

